name: Publish Chrome Extension

on:
  workflow_dispatch:  # This allows manual triggering of the workflow from the GitHub Actions tab

permissions:
  contents: write  # This gives the workflow permission to push to the repository
  packages: write  # This is needed to create releases

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set up Git config
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Bump version
        run: pnpm run bump-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build extension
        run: pnpm run build

      - name: Extract version number
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Verify dist directory
        run: ls -alh dist

      - name: Create output directory
        run: mkdir -p output

      - name: Zip extension
        run: |
            cd dist
            zip -r ../output/ocra-extension-${{ env.VERSION }}.zip ./*
            cd ..

      - name: Install GitHub CLI
        run: sudo apt-get install gh

      - name: Authenticate GitHub CLI
        run: gh auth login --with-token <<< ${{ secrets.GITHUB_TOKEN }}

      - name: Check if tag exists on remote
        id: check_tag
        run: |
          git fetch --tags
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "Tag v${{ env.VERSION }} exists on remote."
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Tag v${{ env.VERSION }} does not exist on remote."
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Push tag to remote
        if: env.TAG_EXISTS == 'false'
        run: |
          git tag v${{ env.VERSION }}
          git push origin v${{ env.VERSION }}


      - name: Create Release
        id: create_release
        run: |
          gh release create v${{ env.VERSION }} output/ocra-extension-${{ env.VERSION }}.zip --title "Release ${{ env.VERSION }}" --notes "Automated release for version ${{ env.VERSION }}"

      - name: Upload ZIP as release asset
        run: |
          gh release upload v${{ env.VERSION }} output/ocra-extension-${{ env.VERSION }}.zip --clobber
